import IFood from "../objects/food";
import IFoodList from "../objects/foodList";
import IFoodBrand from "../objects/foodBrand";
import IFoodCategory from "../objects/foodCategory";
import IRecipe from "../objects/recipe";
import IRecipeList from "../objects/recipeList";
interface IFatSecretCredentials {
    clientId: string;
    clientSecret: string;
    scope: "basic" | "premier" | "barcode" | "localization";
}
interface IGetFoodIdFromBarcode {
    barcode: string;
}
interface IGetFood {
    food_id: number | string;
    include_sub_categories?: boolean;
    flag_default_serving?: boolean;
    region?: string;
    language?: string;
}
interface IGetFoodAutocomplete {
    expression: string;
    max_results?: number;
    region?: string;
    language?: string;
}
interface IGetFoodSearch {
    search_expression?: string;
    page_number?: number;
    max_results?: number;
    generic_description?: "weight" | "portion";
    region?: string;
    language?: string;
}
interface IGetFoodBrands {
    starts_with?: string;
    brand_type?: "manufacturer" | "restaurant" | "supermarket";
    region?: string;
    language?: string;
}
interface IGetFoodCategories {
    region?: string;
    language?: string;
}
interface IGetFoodSubCategories {
    food_category_id: number;
    region?: string;
    language?: string;
}
interface IGetRecipe {
    recipe_id: string | number;
}
interface IGetRecipeSearch {
    search_expression?: string;
    recipe_type?: string;
    page_number?: number;
    max_results?: number;
}
export default class FatSecretClient {
    private clientId;
    private clientSecret;
    private scope;
    private client;
    private readonly OAUTH_URL;
    readonly API_URL = "https://platform.fatsecret.com/rest/server.api";
    constructor(credentials: IFatSecretCredentials);
    _authenticate(): Promise<import("axios").AxiosResponse<any, any>>;
    private _doRequest;
    getFoodIdFromBarcode(params: IGetFoodIdFromBarcode): Promise<string>;
    getFood(params: IGetFood): Promise<IFood>;
    getFoodAutocomplete(params: IGetFoodAutocomplete): Promise<string[]>;
    getFoodSearch(params: IGetFoodSearch): Promise<IFoodList>;
    getFoodBrands(params: IGetFoodBrands): Promise<IFoodBrand[]>;
    getFoodCategories(params: IGetFoodCategories): Promise<IFoodCategory[]>;
    getFoodSubCategories(params: IGetFoodSubCategories): Promise<string[]>;
    getRecipe(params: IGetRecipe): Promise<IRecipe>;
    getRecipeSearch(params: IGetRecipeSearch): Promise<IRecipeList>;
    getRecipeTypes(params: any): Promise<string[]>;
}
export {};
